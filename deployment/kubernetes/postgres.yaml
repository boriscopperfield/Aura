apiVersion: apps/v1
kind: Deployment
metadata:
  name: aura-postgres
  namespace: aura
  labels:
    app: aura-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aura-postgres
  template:
    metadata:
      labels:
        app: aura-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "aura"
        - name: POSTGRES_USER
          value: "aura"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: aura-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - aura
            - -d
            - aura
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - aura
            - -d
            - aura
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: aura-postgres
  namespace: aura
  labels:
    app: aura-postgres
spec:
  selector:
    app: aura-postgres
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: aura
data:
  init-db.sql: |
    -- Initialize AURA database
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS aura_core;
    CREATE SCHEMA IF NOT EXISTS aura_memory;
    CREATE SCHEMA IF NOT EXISTS aura_events;
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON SCHEMA aura_core TO aura;
    GRANT ALL PRIVILEGES ON SCHEMA aura_memory TO aura;
    GRANT ALL PRIVILEGES ON SCHEMA aura_events TO aura;
    
    -- Create tables for event storage
    CREATE TABLE IF NOT EXISTS aura_events.events (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        event_id VARCHAR(255) UNIQUE NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        category VARCHAR(50) NOT NULL,
        event_type VARCHAR(100) NOT NULL,
        source JSONB NOT NULL,
        payload JSONB NOT NULL,
        metadata JSONB NOT NULL DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Create indexes for events
    CREATE INDEX IF NOT EXISTS idx_events_timestamp ON aura_events.events(timestamp);
    CREATE INDEX IF NOT EXISTS idx_events_type ON aura_events.events(event_type);
    CREATE INDEX IF NOT EXISTS idx_events_category ON aura_events.events(category);
    CREATE INDEX IF NOT EXISTS idx_events_payload ON aura_events.events USING GIN(payload);
    
    -- Create tables for memory nodes
    CREATE TABLE IF NOT EXISTS aura_memory.nodes (
        id VARCHAR(255) PRIMARY KEY,
        created_at TIMESTAMP WITH TIME ZONE NOT NULL,
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
        entity_type VARCHAR(50) NOT NULL,
        source JSONB NOT NULL,
        content JSONB NOT NULL,
        summary TEXT NOT NULL,
        keywords TEXT[] NOT NULL DEFAULT '{}',
        entities JSONB NOT NULL DEFAULT '[]',
        relations JSONB NOT NULL DEFAULT '[]',
        importance FLOAT NOT NULL DEFAULT 0.5,
        access_count INTEGER NOT NULL DEFAULT 0,
        last_accessed TIMESTAMP WITH TIME ZONE NOT NULL,
        decay_rate FLOAT NOT NULL DEFAULT 0.01,
        embedding_vector FLOAT[] NULL
    );
    
    -- Create indexes for memory nodes
    CREATE INDEX IF NOT EXISTS idx_nodes_entity_type ON aura_memory.nodes(entity_type);
    CREATE INDEX IF NOT EXISTS idx_nodes_importance ON aura_memory.nodes(importance);
    CREATE INDEX IF NOT EXISTS idx_nodes_last_accessed ON aura_memory.nodes(last_accessed);
    CREATE INDEX IF NOT EXISTS idx_nodes_keywords ON aura_memory.nodes USING GIN(keywords);
    CREATE INDEX IF NOT EXISTS idx_nodes_content ON aura_memory.nodes USING GIN(content);
    CREATE INDEX IF NOT EXISTS idx_nodes_summary_trgm ON aura_memory.nodes USING GIN(summary gin_trgm_ops);
    
    -- Create tables for tasks
    CREATE TABLE IF NOT EXISTS aura_core.tasks (
        id VARCHAR(255) PRIMARY KEY,
        parent_id VARCHAR(255) REFERENCES aura_core.tasks(id),
        name VARCHAR(500) NOT NULL,
        description TEXT,
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        completed_at TIMESTAMP WITH TIME ZONE NULL,
        metadata JSONB NOT NULL DEFAULT '{}'
    );
    
    -- Create indexes for tasks
    CREATE INDEX IF NOT EXISTS idx_tasks_status ON aura_core.tasks(status);
    CREATE INDEX IF NOT EXISTS idx_tasks_parent_id ON aura_core.tasks(parent_id);
    CREATE INDEX IF NOT EXISTS idx_tasks_created_at ON aura_core.tasks(created_at);
    
    -- Create function to update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    -- Create triggers for updated_at
    CREATE TRIGGER update_nodes_updated_at BEFORE UPDATE ON aura_memory.nodes
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    
    CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON aura_core.tasks
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();